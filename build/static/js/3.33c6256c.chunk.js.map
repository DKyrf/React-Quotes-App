{"version":3,"sources":["authentication/AuthForm.module.css","authentication/AuthForm.js"],"names":["module","exports","AuthForm","useState","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","navigate","useNavigate","dispatchFN","useDispatch","emailRef","useRef","passwordRef","className","classes","auth","onSubmit","event","url","preventDefault","fetch","method","body","JSON","stringify","email","current","value","password","returnSecureToken","headers","then","response","ok","console","log","json","data","errorMessage","error","message","alert","authAction","logIn","idToken","catch","input_control","htmlFor","ref","type","id","name","required","input_action","button","button_toggler","onClick","prev"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,cAAgB,gCAAgC,aAAe,+BAA+B,OAAS,yBAAyB,eAAiB,iC,kHCkGlLC,UA5FE,WACb,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAWC,cAEXC,EAAaC,cAEbC,EAAWC,mBACXC,EAAcD,mBAsDpB,OACI,0BAASE,UAAWC,IAAQC,KAA5B,UACI,6BAAKb,EAAa,QAAU,YAC5B,uBAAMc,SAnDK,SAACC,GAGhB,IAAIC,EAFJD,EAAME,iBACNd,GAAa,GAITa,EADAhB,EACM,oHAEA,wGAGVkB,MAAMF,EAAK,CACPG,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,MAAOf,EAASgB,QAAQC,MACxBC,SAAUhB,EAAYc,QAAQC,MAC9BE,mBAAmB,IAEvBC,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAC,GAGJ,OAFA3B,GAAa,GACbF,GAAc,GACV6B,EAASC,IACTC,QAAQC,IAAI,gBAAiBH,GACtBA,EAASI,QAETJ,EAASI,OAAOL,MAAK,SAAAM,GACxB,IAAIC,EAAe,yBACfD,GAAQA,EAAKE,OAASF,EAAKE,MAAMC,UACjCF,EAAeD,EAAKE,MAAMC,SAE9BC,MAAMH,EACT,GAER,IAAEP,MAAK,SAAAM,GACJ3B,EAASgB,QAAQC,MAAQ,GACzBf,EAAYc,QAAQC,MAAQ,GAC5BnB,EAAWkC,IAAWC,MAAMN,EAAKO,UACjCtC,EAAS,UACZ,IAAEuC,OAAM,SAAAN,GACLE,MAAMF,EAAMC,QACf,GAEJ,EAMO,UACI,sBAAK3B,UAAWC,IAAQgC,cAAxB,UACI,uBAAOC,QAAQ,QAAf,wBACA,uBAAOC,IAAKtC,EAAUuC,KAAK,QAAQC,GAAG,QAAQC,KAAK,QAAQC,UAAQ,OAEvE,sBAAKvC,UAAWC,IAAQgC,cAAxB,UACI,uBAAOC,QAAQ,WAAf,4BACA,uBAAOC,IAAKpC,EAAaqC,KAAK,WAAWC,GAAG,WAAWC,KAAK,WAAWC,UAAQ,OAEnF,qBAAKvC,UAAWC,IAAQuC,aAAxB,SACMjD,EASI,cAAC,IAAD,CAAgBS,UAAU,aAR5B,qCACI,wBAAQA,UAAWC,IAAQwC,OAA3B,SACKpD,EAAa,QAAU,mBAE5B,wBAAQW,UAAWC,IAAQyC,eAAgBC,QAtE7C,WAClBrD,GAAc,SAAAsD,GAAI,OAAKA,CAAL,GACrB,EAoEuB,SACKvD,EAAa,qBAAuB,0CAQpE,C","file":"static/js/3.33c6256c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__1As1l\",\"input_control\":\"AuthForm_input_control__2IS1E\",\"input_action\":\"AuthForm_input_action__KlyRP\",\"button\":\"AuthForm_button__g16Mi\",\"button_toggler\":\"AuthForm_button_toggler__2bboU\"};","import { useState, useRef } from \"react\";\nimport { authAction } from \"../components/store/authSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport classes from \"./AuthForm.module.css\";\n\nconst AuthForm = () => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const navigate = useNavigate();\n\n    const dispatchFN = useDispatch();\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n\n    const toggleHandler = () => {\n        setIsLoggedIn(prev => !prev)\n    };\n\n    const submitAuth = (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n        let url;\n\n        if (isLoggedIn) {\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD2EGbmA_S4qaFcPtzgzq2rD9BrMnU-JI0\"\n        } else {\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD2EGbmA_S4qaFcPtzgzq2rD9BrMnU-JI0\"\n        };\n\n        fetch(url, {\n            method: \"POST\",\n            body: JSON.stringify({\n                email: emailRef.current.value,\n                password: passwordRef.current.value,\n                returnSecureToken: true,\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(response => {\n            setIsLoading(false);\n            setIsLoggedIn(true);\n            if (response.ok) {\n                console.log(\"response >>> \", response);\n                return response.json()\n            } else {\n                return response.json().then(data => {\n                    let errorMessage = \"Authentication failed!\";\n                    if (data && data.error && data.error.message) {\n                        errorMessage = data.error.message\n                    };\n                    alert(errorMessage);\n                })\n            };\n        }).then(data => {\n            emailRef.current.value = \"\";\n            passwordRef.current.value = \"\";\n            dispatchFN(authAction.logIn(data.idToken));\n            navigate(\"/quotes\");\n        }).catch(error => {\n            alert(error.message);\n        });\n\n    }\n\n\n    return (\n        <section className={classes.auth}>\n            <h1>{isLoggedIn ? \"Login\" : \"Sign UP\"}</h1>\n            <form onSubmit={submitAuth}>\n                <div className={classes.input_control}>\n                    <label htmlFor=\"email\">Your Email</label>\n                    <input ref={emailRef} type=\"email\" id=\"email\" name=\"email\" required />\n                </div>\n                <div className={classes.input_control}>\n                    <label htmlFor=\"password\"> Your Password</label>\n                    <input ref={passwordRef} type=\"password\" id=\"password\" name=\"password\" required />\n                </div>\n                <div className={classes.input_action}>\n                    {!isLoading ?\n                        <>\n                            <button className={classes.button}>\n                                {isLoggedIn ? \"Login\" : \"Create Account\"}\n                            </button>\n                            <button className={classes.button_toggler} onClick={toggleHandler}>\n                                {isLoggedIn ? \"Create new account\" : \"Login with existing account\"}\n                            </button>\n                        </>\n                        : <LoadingSpinner className=\"centered\" />}\n                </div>\n            </form>\n        </section>\n    )\n};\n\nexport default AuthForm;"],"sourceRoot":""}