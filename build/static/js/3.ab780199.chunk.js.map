{"version":3,"sources":["authentication/AuthForm.module.css","authentication/AuthForm.js"],"names":["module","exports","calculateLogOutTime","expirationTime","currentTime","Date","getTime","AuthForm","navigate","useNavigate","useState","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","authStatus","useSelector","state","authReducer","dispatchFN","useDispatch","emailRef","useRef","passwordRef","submitAuth","event","preventDefault","url","AuthHandler","res","status","token","authAction","logIn","remeinigTime","expiresIn","setTimeout","logOut","setErrorMessege","message","className","classes","auth","error","style","color","margin","onSubmit","input_control","htmlFor","ref","type","id","name","required","input_action","button","button_toggler","onClick","prev"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,cAAgB,gCAAgC,aAAe,+BAA+B,OAAS,yBAAyB,eAAiB,iC,wICO3LC,EAAsB,SAACC,GAEzB,IAAMC,GAAc,IAAIC,MAAOC,UAK/B,OAJ0B,IAAID,KAAKF,GAAgBG,UAEVF,CAI5C,EAmFcG,UAjFE,WACb,IAAMC,EAAWC,cAEjB,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,WAAV,IAE9BC,EAAaC,cAEbC,EAAWC,mBACXC,EAAcD,mBAMdE,EAAU,iDAAG,WAAOC,GAAP,4FACfA,EAAMC,iBACNZ,GAAa,GAKTa,EADAhB,EACM,oHAEA,wGATK,SAYGiB,YAAYD,EAAK,CAC/BN,WACAE,gBAdW,OAiBI,SALbM,EAZS,QAiBPC,QAAqBD,EAAIE,OAI7BjB,GAAa,GACbK,EAAWa,IAAWC,MAAMJ,EAAIE,QAChCvB,EAAS,KAEH0B,EAAehC,EAAoB2B,EAAIM,WAE7CC,YAAW,WACPjB,EAAWa,IAAWK,UACtB7B,EAAS,IACZ,GAAE0B,KAZHf,EAAWa,IAAWM,gBAAgBT,EAAIU,UAC1CzB,GAAa,IAnBF,2CAAH,sDAmChB,OACI,0BAAS0B,UAAWC,IAAQC,KAA5B,UACI,6BAAK/B,EAAa,QAAU,YAC3BI,EAAW4B,OAAS,qBAAIH,UAAU,WAAWI,MAAO,CAAEC,MAAO,MAAOC,OAAQ,UAAxD,0BAA2E/B,EAAW4B,MAAtF,aACrB,uBAAMI,SAAUvB,EAAhB,UACI,sBAAKgB,UAAWC,IAAQO,cAAxB,UACI,uBAAOC,QAAQ,QAAf,wBACA,uBAAOC,IAAK7B,EAAU8B,KAAK,QAAQC,GAAG,QAAQC,KAAK,QAAQC,UAAQ,OAEvE,sBAAKd,UAAWC,IAAQO,cAAxB,UACI,uBAAOC,QAAQ,WAAf,4BACA,uBAAOC,IAAK3B,EAAa4B,KAAK,WAAWC,GAAG,WAAWC,KAAK,WAAWC,UAAQ,OAEnF,qBAAKd,UAAWC,IAAQc,aAAxB,SACM1C,EASI,cAAC,IAAD,CAAgB2B,UAAU,aAR5B,qCACI,wBAAQA,UAAWC,IAAQe,OAA3B,SACK7C,EAAa,QAAU,mBAE5B,wBAAQ6B,UAAWC,IAAQgB,eAAgBC,QA1D7C,WAClB9C,GAAc,SAAA+C,GAAI,OAAKA,CAAL,GACrB,EAwDuB,SACKhD,EAAa,qBAAuB,0CAQpE,C","file":"static/js/3.ab780199.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__1As1l\",\"input_control\":\"AuthForm_input_control__2IS1E\",\"input_action\":\"AuthForm_input_action__KlyRP\",\"button\":\"AuthForm_button__g16Mi\",\"button_toggler\":\"AuthForm_button_toggler__2bboU\"};","import { useState, useRef } from \"react\";\nimport { authAction } from \"../components/store/authSlice\";\nimport { AuthHandler } from \"../components/hooks/use-http\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport classes from \"./AuthForm.module.css\";\n\nconst calculateLogOutTime = (expirationTime) => {\n\n    const currentTime = new Date().getTime();\n    const adjExpirationTime = new Date(expirationTime).getTime();\n\n    const remeinigTime = adjExpirationTime - currentTime;\n\n    return remeinigTime;\n\n};\n\nconst AuthForm = () => {\n    const navigate = useNavigate();\n\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const authStatus = useSelector(state => state.authReducer);\n\n    const dispatchFN = useDispatch();\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n\n    const toggleHandler = () => {\n        setIsLoggedIn(prev => !prev)\n    };\n\n    const submitAuth = async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n\n        let url;\n\n        if (isLoggedIn) {\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD2EGbmA_S4qaFcPtzgzq2rD9BrMnU-JI0\"\n        } else {\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD2EGbmA_S4qaFcPtzgzq2rD9BrMnU-JI0\"\n        };\n\n        const res = await AuthHandler(url, {\n            emailRef,\n            passwordRef\n        });\n\n        if (res.status === \"ERR\" && !res.token) {\n            dispatchFN(authAction.setErrorMessege(res.message))\n            setIsLoading(false);\n        } else {\n            setIsLoading(false);\n            dispatchFN(authAction.logIn(res.token));\n            navigate(\"/\");\n\n            const remeinigTime = calculateLogOutTime(res.expiresIn);\n\n            setTimeout(() => {\n                dispatchFN(authAction.logOut());\n                navigate(\"/\")\n            }, remeinigTime)\n        };\n\n    }\n\n    return (\n        <section className={classes.auth}>\n            <h1>{isLoggedIn ? \"Login\" : \"Sign UP\"}</h1>\n            {authStatus.error && <h3 className=\"centered\" style={{ color: \"red\", margin: \"0.5rem\" }}> {`( ${authStatus.error} )`} </h3>}\n            <form onSubmit={submitAuth}>\n                <div className={classes.input_control}>\n                    <label htmlFor=\"email\">Your Email</label>\n                    <input ref={emailRef} type=\"email\" id=\"email\" name=\"email\" required />\n                </div>\n                <div className={classes.input_control}>\n                    <label htmlFor=\"password\"> Your Password</label>\n                    <input ref={passwordRef} type=\"password\" id=\"password\" name=\"password\" required />\n                </div>\n                <div className={classes.input_action}>\n                    {!isLoading ?\n                        <>\n                            <button className={classes.button}>\n                                {isLoggedIn ? \"Login\" : \"Create Account\"}\n                            </button>\n                            <button className={classes.button_toggler} onClick={toggleHandler}>\n                                {isLoggedIn ? \"Create new account\" : \"Login with existing account\"}\n                            </button>\n                        </>\n                        : <LoadingSpinner className=\"centered\" />}\n                </div>\n            </form>\n        </section>\n    )\n};\n\nexport default AuthForm;"],"sourceRoot":""}