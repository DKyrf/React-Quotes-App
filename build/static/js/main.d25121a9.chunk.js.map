{"version":3,"sources":["components/hooks/use-http.js","components/store/newQuoteSlice.js","components/layout/MainNavigation.module.css","components/quotes/QuoteForm.module.css","components/quotes/HighlightedQuote.js","components/UI/LoadingSpinner.js","components/comments/NewCommentForm.module.css","components/quotes/QuoteList.module.css","components/layout/Layout.module.css","components/quotes/QuoteItem.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.module.css","components/comments/Comments.module.css","components/UI/LoadingSpinner.module.css","components/pages/QuoteDetail.js","components/UI/Card.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","components/hooks/useValidator.js","components/pages/NewQuotes.js","components/store/store.js","components/layout/MainNavigation.js","components/layout/Layout.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/pages/AllQuotes.js","components/comments/CommentItem.js","components/comments/NewCommentForm.js","components/comments/Comments.js","App.js","index.js"],"names":["firebaseDB","FetchQuotes","fetch","fethedData","json","data","ok","quotes","error","statusText","key","quote","id","push","fetchSingleQuote","fetchedQuote","Error","addQuote","quoteData","method","body","JSON","stringify","headers","postQuote","addComment","requestData","value","postComment","commentID","name","getAllComments","quoteID","getComments","comments","comment","newQuoteSlice","createSlice","initialState","author","text","isValid","authTouched","textTouched","showComments","reducers","setAuth","state","action","payload","setText","setValid","reset","authBlurHandler","textBlurHandler","setCommentsVisibility","newQuoteReducer","reducer","newQuoteAction","actions","module","exports","HighlightedQuote","props","className","classes","React","memo","LoadingSpinner","spinner","QuoteDetail","useEffect","setShowComments","useState","showComment","getLoader","useLoaderData","to","replace","onClick","loader","obj","params","Card","card","children","init","QuoteForm","dispatchFN","useDispatch","useSelector","trim","authChangeHandler","element","target","textChangeHandler","authorBlur","textBlur","authValid","textValid","useValidator","newEntry","form","isLoading","loading","control","htmlFor","style","backgroundColor","onBlur","onChange","type","rows","disabled","NewQuotes","request","formData","newPost","get","console","log","redirect","store","configureStore","MainNavigation","header","logo","nav","item","isActive","active","Layout","main","QuoteItem","QuoteList","prevQuotes","ascChecker","navigate","useNavigate","searchParams","useLocation","isAscending","URLSearchParams","search","sorted","sort","a","b","sorting","list","map","AllQuotes","quotesLoader","CommentItem","NewCommentForm","required","newComment","Comments","commentsLoaderData","isAddingComment","setIsAddingComment","inParams","useParams","el","App","lazy","NotFound","roures","createBrowserRouter","createRoutesFromElements","path","errorElement","quoteAction","singleQuoteLoader","commentsLoader","commentAction","fallback","router","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d25121a9.chunk.js","sourcesContent":["const firebaseDB = \"https://router-quotes-acf44-default-rtdb.firebaseio.com\";\n\nexport async function FetchQuotes() {\n\n\n    const fethedData = await fetch(`${firebaseDB}/quotes.json`);\n    const data = await fethedData.json();\n\n    if (!fethedData.ok) {\n        return { quotes: [], error: fethedData.statusText }\n    };\n\n    const quotes = [];\n\n    for (const key in data) {\n        const quote = {\n            id: key,\n            ...data[key],\n        };\n        quotes.push(quote);\n    };\n\n    return quotes;\n\n};\n\nexport async function fetchSingleQuote(id) {\n    const fetchedQuote = await fetch(`${firebaseDB}/quotes/${id}.json`);\n\n    if (fetchedQuote.ok) {\n        return await fetchedQuote.json();\n    } else throw new Error(\"Couldn't fetch quote.\" || fetchedQuote.statusText)\n\n};\n\nexport async function addQuote(quoteData) {\n\n    const postQuote = await fetch(`${firebaseDB}/quotes.json`, {\n        method: \"POST\",\n        body: JSON.stringify({ ...quoteData }),\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n    });\n    const data = await postQuote.json();\n\n    if (!postQuote.ok) {\n        throw new Error(\"Could not feth quote.\" || postQuote.statusText)\n    };\n\n    return data\n\n};\n\nexport async function addComment(requestData) {\n    const postComment = await fetch(`${firebaseDB}/comments/${requestData.id}.json`, {\n        method: \"POST\",\n        body: JSON.stringify(requestData.value),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n    });\n\n    const data = postComment.json();\n\n    if (!postComment.ok) {\n        throw new Error(\"Could not add comment.\" || postComment.statusText)\n    };\n\n    return { commentID: data.name };\n\n};\n\nexport async function getAllComments(quoteID) {\n    const getComments = await fetch(`${firebaseDB}/comments/${quoteID}.json`);\n    const data = await getComments.json();\n\n    if (!getComments.ok) {\n        throw new Error(\"Could get comments.\" || getComments.statusText);\n    };\n\n    const comments = [];\n\n    for (const key in data) {\n        const comment = {\n            id: key,\n            value: data[key]\n        };\n        comments.push(comment);\n    };\n\n    return comments;\n\n};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    author: \"\",\n    text: \"\",\n    isValid: false,\n    authTouched: false,\n    textTouched: false,\n    showComments: false,\n};\n\nconst newQuoteSlice = createSlice({\n    name: \"newQuote\",\n    initialState,\n    reducers: {\n        setAuth(state, action) {\n            state.authTouched = true;\n            state.author = action.payload;\n        },\n        setText(state, action) {\n            state.textTouched = true;\n            state.text = action.payload;\n        },\n        setValid(state, action) {\n            state.isValid = action.payload;\n        },\n        reset(state) {\n            state.author = \"\"\n            state.text = \"\"\n            state.isValid = false\n            state.authTouched = false\n            state.textTouched = false\n        },\n        authBlurHandler(state) {\n            state.authTouched = false;\n        },\n        textBlurHandler(state) {\n            state.textTouched = false;\n        },\n        setCommentsVisibility(state, action) {\n            state.showComments = action.payload;\n        }\n    },\n});\n\nexport const newQuoteReducer = newQuoteSlice.reducer;\nexport const newQuoteAction = newQuoteSlice.actions;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__pcWBd\",\"logo\":\"MainNavigation_logo__3mTft\",\"nav\":\"MainNavigation_nav__2KJfX\",\"active\":\"MainNavigation_active__oN3Ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import React from 'react';\nimport classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default React.memo(HighlightedQuote);\n","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__auk_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__2Kyqv\"};","import { Fragment, useEffect, useState } from \"react\";\nimport { Link, Navigate, Outlet } from \"react-router-dom\"\nimport { useLoaderData } from \"react-router-dom\";\nimport { fetchSingleQuote } from \"../hooks/use-http\";\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\n\nexport default function QuoteDetail() {\n    useEffect(() => {\n        return setShowComments(false)\n    }, []);\n\n    const [showComment, setShowComments] = useState(false);\n\n    const getLoader = useLoaderData();\n\n    const clickHandler = () => setShowComments(true);\n\n    return (\n        <Fragment>\n            <h1>QuoteDetail</h1>\n            {getLoader ? <HighlightedQuote text={getLoader.text} author={getLoader.author} /> : <Navigate to=\"/no-quote-existed\" replace={true} />}\n            {!showComment\n                ? <Link onClick={clickHandler} className=\"btn--flat centered\" to=\"comments\"> Render comments </Link>\n                : <Outlet />}\n\n        </Fragment>\n\n    )\n};\n\nexport function loader(obj) {\n    return fetchSingleQuote(obj.params.quoteID);\n};\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","import React from 'react';\nimport classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default React.memo(Card);\n","import React from \"react\";\nimport useValidator from \"../hooks/useValidator\";\nimport { useSelector } from \"react-redux\";\nimport { Form } from \"react-router-dom\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\"\nimport Card from '../UI/Card';\nimport classes from './QuoteForm.module.css';\n\nlet init = true;\n\nconst QuoteForm = (props) => {\n  const { authChangeHandler, textChangeHandler, authorBlur, textBlur, authValid, textValid, } = useValidator();\n\n  init = false;\n\n  const newEntry = useSelector(state => state.newQuoteReducer);\n\n  return (\n    <Card>\n      <Form className={classes.form} method=\"post\" action=\"/new-quote\">\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author { }</label>\n          <input\n            style={{ backgroundColor: authValid && !init ? \"pink\" : \"white\" }}\n            onBlur={authorBlur}\n            onChange={authChangeHandler}\n            type='text'\n            name=\"author\"\n            id='author' />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea\n            style={{ backgroundColor: textValid && !init ? \"pink\" : \"white\" }}\n            onBlur={textBlur}\n            onChange={textChangeHandler}\n            name=\"text\"\n            id='text'\n            rows='5' ></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button\n            type='submit'\n            className='btn'\n            disabled={!newEntry.isValid}>Add Quote</button>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default React.memo(QuoteForm);\n\n\n\n","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { newQuoteAction } from \"../store/newQuoteSlice\";\n\nexport default function useValidator() {\n\n    const dispatchFN = useDispatch();\n    const { author, text, isValid, authTouched, textTouched } = useSelector(state => state.newQuoteReducer);\n\n    useEffect(() => {\n        if (author.trim() !== \"\" && text.trim() !== \"\") {\n            dispatchFN(newQuoteAction.setValid(true))\n        } else {\n            dispatchFN(newQuoteAction.setValid(false))\n        }\n    }, [dispatchFN, author, text]);\n\n    const authChangeHandler = (element) => {\n        dispatchFN(newQuoteAction.setAuth(element.target.value))\n    };\n\n    const textChangeHandler = (element) => {\n        dispatchFN(newQuoteAction.setText(element.target.value))\n    };\n\n    const authorBlur = () => {\n        dispatchFN(newQuoteAction.authBlurHandler())\n    };\n\n    const textBlur = () => {\n        dispatchFN(newQuoteAction.textBlurHandler())\n    };\n\n    const authValid = authTouched && author.trim() === \"\" && !isValid;\n    const textValid = textTouched && text.trim() === \"\" && !isValid;\n\n    return {\n        authChangeHandler,\n        textChangeHandler,\n        authorBlur,\n        textBlur,\n        authValid,\n        textValid,\n    }\n};\n","import { redirect } from \"react-router-dom\"\nimport { addQuote } from \"../hooks/use-http\"\nimport QuoteForm from \"../quotes/QuoteForm\"\n\nexport default function NewQuotes() {\n\n    return (\n        <QuoteForm />\n    )\n}\n\nexport async function action(obj) {\n\n    const formData = await obj.request.formData();\n    const newPost = {\n        author: formData.get(\"author\"),\n        text: formData.get(\"text\"),\n    };\n    try {\n        await addQuote(newPost)\n    } catch (error) {\n        console.log(error);\n        throw error\n\n    };\n\n    return redirect(\"/quotes\");\n\n}","import { configureStore } from \"@reduxjs/toolkit\";\nimport { newQuoteReducer } from \"./newQuoteSlice\";\n\n\nconst store = configureStore({\n    reducer: {\n        newQuoteReducer,\n    }\n})\n\nexport default store","import { NavLink } from \"react-router-dom\";\nimport classes from \"./MainNavigation.module.css\"\n\nexport default function MainNavigation() {\n    return <header className={classes.header}>\n        <div className={classes.logo}>\n            Danylos Quotes\n        </div>\n\n        <nav className={classes.nav}>\n            <ul>\n                <li> <NavLink className={item => item.isActive ? classes.active : \"\"} to=\"/quotes\">Quotes</NavLink> </li>\n                <li> <NavLink className={item => item.isActive ? classes.active : \"\"} to=\"/new-quote\">New Quotes</NavLink> </li>\n            </ul>\n        </nav>\n    </header>\n};\n\n","import { Fragment } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport classes from \"./Layout.module.css\";\nimport MainNavigation from \"./MainNavigation\";\n\nexport default function Layout() {\n\n    return <Fragment>\n        <MainNavigation />\n        <main className={classes.main}>\n            <Outlet />\n        </main>\n    </Fragment>\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default React.memo(QuoteItem);\n","import React from 'react';\nimport { Fragment } from 'react';\nimport { FetchQuotes } from '../hooks/use-http';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sorteQuotes = (prevQuotes, ascChecker) => [...prevQuotes].sort((a, b) => {\n  if (ascChecker) {\n    return a.id > b.id ? 1 : -1\n  } else {\n    return a.id < b.id ? 1 : -1\n  }\n});\n\nconst QuoteList = (props) => {\n\n  const navigate = useNavigate();\n  const searchParams = useLocation();\n  const searched = new URLSearchParams(searchParams.search);\n  const isAscending = searched.get(\"sort\") === \"asc\";\n  const sorted = sorteQuotes(props.quotes, isAscending);\n\n\n\n  const navigateHandler = () => {\n    navigate(`/quotes?sort=${isAscending ? \"des\" : \"asc\"}`);\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={navigateHandler}>Sorted {isAscending ? \"Ascending\" : \"Decending\"}</button>\n      </div>\n      <ul className={classes.list}>\n        {sorted.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default React.memo(QuoteList);\n\nexport function loader() {\n  return FetchQuotes()\n}\n","import { useLoaderData } from \"react-router-dom\"\nimport QuoteList from \"../quotes/QuoteList\"\n\n\nexport default function AllQuotes() {\n\n    const quotesLoader = useLoaderData();\n\n    return <QuoteList quotes={quotesLoader} />\n}","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport { addComment } from '../hooks/use-http';\nimport { Form, redirect } from 'react-router-dom';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n\n\n\n\n  return (\n    <Form className={classes.form} method=\"post\" action={`/quotes/${props.id}/comments`}>\n      <div className={classes.control}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea required id='comment' rows='5' name=\"comment\"></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </Form>\n  );\n};\n\nexport default React.memo(NewCommentForm);\n\n\nexport async function action(obj) {\n  const formData = await obj.request.formData();\n  const newComment = {\n    id: obj.params.quoteID,\n    value: formData.get(\"comment\")\n  };\n\n  try {\n    await addComment(newComment);\n  } catch (error) {\n    console.log(error);\n  };\n\n  return redirect(`/quotes/${obj.params.quoteID}/comments`)\n\n}\n\n","import { useState } from 'react';\nimport { useLoaderData, useParams } from 'react-router-dom';\nimport { getAllComments } from \"../hooks/use-http\"\nimport CommentItem from \"./CommentItem\"\nimport NewCommentForm from './NewCommentForm';\nimport classes from './Comments.module.css';\n\nconst Comments = () => {\n  const commentsLoaderData = useLoaderData();\n\n  const [isAddingComment, setIsAddingComment] = useState();\n  const inParams = useParams();\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm id={inParams.quoteID} />}\n      <ul>\n        {commentsLoaderData.map(el => <CommentItem key={el.id} text={el.value} />)}\n      </ul>\n    </section>\n  );\n};\n\nexport default Comments;\n\nexport function loader(obj) {\n  return getAllComments(obj.params.quoteID)\n}\n","import React, { Suspense } from \"react\";\nimport { Route, createBrowserRouter, createRoutesFromElements, RouterProvider } from \"react-router-dom\"\nimport Layout from \"./components/layout/Layout\";\nimport AllQuotes from \"./components/pages/AllQuotes\"\nimport HighlightedQuote from \"./components/quotes/HighlightedQuote\"\nimport Comments from \"./components/comments/Comments\";\nimport LoadingSpinner from \"./components/UI/LoadingSpinner\";\nimport { loader as quotesLoader } from \"./components/quotes/QuoteList\"\nimport { loader as singleQuoteLoader } from \"./components/pages/QuoteDetail\"\nimport { loader as commentsLoader } from \"./components/comments/Comments\";\nimport { action as quoteAction } from \"./components/pages/NewQuotes\"\nimport { action as commentAction } from \"./components/comments/NewCommentForm\";\nfunction App() {\n\n  const NewQuotes = React.lazy(() => import(\"./components/pages/NewQuotes\"));\n  const QuoteDetail = React.lazy(() => import(\"./components/pages/QuoteDetail\"));\n  // const AllQuotes = React.lazy(() => import(\"./components/pages/AllQuotes\"));\n  const NotFound = React.lazy(() => import(\"./components/quotes/NoQuotesFound\"));\n\n  const roures = createBrowserRouter(createRoutesFromElements(\n    <Route path=\"/\" element={<Layout />} errorElement={<NotFound />}>\n      {/* <Route index element={<Redirect to=\"/quotes\" />} /> */}\n      <Route path=\"/quotes/*\" element={<AllQuotes />} loader={quotesLoader} />\n      <Route path=\"/new-quote\" element={<NewQuotes />} action={quoteAction} />\n      <Route path=\"/quotes/:quoteID/*\" element={<QuoteDetail />} loader={singleQuoteLoader}>\n        <Route path=\"comments\" element={<Comments />} loader={commentsLoader} action={commentAction} />\n      </Route>\n      <Route path=\"/highlighted\" element={<HighlightedQuote />} />\n    </Route>\n  ));\n\n  return <Suspense fallback={<div className=\"centered\"> <LoadingSpinner /> </div>}>\n    <RouterProvider router={roures} />\n  </Suspense>\n\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport store from './components/store/store';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n"],"sourceRoot":""}