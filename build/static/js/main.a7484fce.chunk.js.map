{"version":3,"sources":["components/hooks/use-http.js","components/store/newQuoteSlice.js","components/layout/MainNavigation.module.css","components/quotes/QuoteForm.module.css","components/comments/NewCommentForm.module.css","components/store/authSlice.js","components/UI/LoadingSpinner.js","components/quotes/HighlightedQuote.js","components/quotes/QuoteList.module.css","components/layout/Layout.module.css","components/quotes/QuoteItem.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.module.css","components/comments/Comments.module.css","components/UI/LoadingSpinner.module.css","components/pages/QuoteDetail.js","components/UI/Card.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","components/hooks/useValidator.js","components/pages/NewQuotes.js","components/store/store.js","components/layout/MainNavigation.js","components/layout/Layout.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/pages/AllQuotes.js","components/comments/CommentItem.js","components/comments/NewCommentForm.js","components/comments/Comments.js","App.js","index.js"],"names":["firebaseDB","FetchQuotes","fetch","fethedData","json","data","ok","quotes","error","statusText","key","quote","id","push","fetchSingleQuote","fetchedQuote","Error","addQuote","quoteData","method","body","JSON","stringify","headers","postQuote","addComment","requestData","value","postComment","commentID","name","getAllComments","quoteID","getComments","comments","comment","AuthHandler","url","sendedData","email","emailRef","current","password","passwordRef","returnSecureToken","then","res","errorHandler","message","status","fetchedData","token","idToken","catch","console","log","newQuoteSlice","createSlice","initialState","author","text","isValid","authTouched","textTouched","showComments","reducers","setAuth","state","action","payload","setText","setValid","reset","authBlurHandler","textBlurHandler","setCommentsVisibility","newQuoteReducer","reducer","newQuoteAction","actions","module","exports","localStorage","getItem","isLoggedIn","expirationTime","authSlice","logIn","setItem","logOut","removeItem","setErrorMessege","calculateLogOutTime","currentTime","Date","getTime","remeinigTime","authReducer","authAction","LoadingSpinner","className","classes","spinner","HighlightedQuote","props","React","memo","QuoteDetail","useState","showComment","setShowComments","getLoader","useLoaderData","to","replace","onClick","loader","obj","params","Card","card","children","init","QuoteForm","dispatchFN","useDispatch","useSelector","useEffect","trim","authChangeHandler","element","target","textChangeHandler","authorBlur","textBlur","authValid","textValid","useValidator","newEntry","form","isLoading","loading","control","htmlFor","style","backgroundColor","onBlur","onChange","type","rows","disabled","NewQuotes","request","formData","newPost","get","redirect","store","configureStore","MainNavigation","navigate","useNavigate","authCTX","header","logo","nav","item","isActive","active","Layout","main","QuoteItem","QuoteList","prevQuotes","ascChecker","searchParams","useLocation","isAscending","URLSearchParams","search","sorted","sort","a","b","sorting","list","map","AllQuotes","quotesLoader","CommentItem","NewCommentForm","minLength","required","cancelHandler","cancel","newComment","Comments","commentsLoaderData","isAddingComment","setIsAddingComment","inParams","useParams","el","App","authStatus","lazy","AuthForm","NotFound","roures","createBrowserRouter","createRoutesFromElements","path","errorElement","index","quoteAction","singleQuoteLoader","commentsLoader","commentAction","fallback","router","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a7484fce.chunk.js","sourcesContent":["const firebaseDB = \"https://router-quotes-acf44-default-rtdb.firebaseio.com\";\n\nexport async function FetchQuotes() {\n\n    const fethedData = await fetch(`${firebaseDB}/quotes.json`);\n    const data = await fethedData.json();\n\n    if (!fethedData.ok) {\n        return { quotes: [], error: fethedData.statusText }\n    };\n\n    const quotes = [];\n\n    for (const key in data) {\n        const quote = {\n            id: key,\n            ...data[key],\n        };\n        quotes.push(quote);\n    };\n\n    return quotes;\n\n};\n\nexport async function fetchSingleQuote(id) {\n    const fetchedQuote = await fetch(`${firebaseDB}/quotes/${id}.json`);\n\n    if (fetchedQuote.ok) {\n        return await fetchedQuote.json();\n    } else throw new Error(\"Couldn't fetch quote.\" || fetchedQuote.statusText)\n\n};\n\nexport async function addQuote(quoteData) {\n\n    const postQuote = await fetch(`${firebaseDB}/quotes.json`, {\n        method: \"POST\",\n        body: JSON.stringify({ ...quoteData }),\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n    });\n    const data = await postQuote.json();\n\n    if (!postQuote.ok) {\n        throw new Error(\"Could not feth quote.\" || postQuote.statusText)\n    };\n\n    return data\n\n};\n\nexport async function addComment(requestData) {\n    const postComment = await fetch(`${firebaseDB}/comments/${requestData.id}.json`, {\n        method: \"POST\",\n        body: JSON.stringify(requestData.value),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n    });\n\n    const data = postComment.json();\n\n    if (!postComment.ok) {\n        throw new Error(\"Could not add comment.\" || postComment.statusText)\n    };\n\n    return { commentID: data.name };\n\n};\n\nexport async function getAllComments(quoteID) {\n    const getComments = await fetch(`${firebaseDB}/comments/${quoteID}.json`);\n    const data = await getComments.json();\n\n    if (!getComments.ok) {\n        throw new Error(\"Could get comments.\" || getComments.statusText);\n    };\n\n    const comments = [];\n\n    for (const key in data) {\n        const comment = {\n            id: key,\n            value: data[key]\n        };\n        comments.push(comment);\n    };\n\n    return comments;\n\n};\n\nexport async function AuthHandler(url, sendedData) {\n\n    return fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify({\n            email: sendedData.emailRef.current.value,\n            password: sendedData.passwordRef.current.value,\n            returnSecureToken: true,\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n    })\n        .then(res => {\n            if (res.ok) {\n                return res.json()\n            } else {\n                return res.json().then(data => {\n                    let errorHandler = \"Something went wrong...\";\n                    if (data && data.error && data.error.message) {\n                        errorHandler = data.error.message;\n                    };\n                    return { status: \"ERR\", data: errorHandler };\n                })\n            }\n        })\n        .then(fetchedData => {\n            // const expTime = new Date(new Date().getTime() + (+fetchedData.expiresIn * 1000));\n            return {\n                status: fetchedData.status,\n                token: fetchedData.idToken,\n                message: fetchedData.data,\n                // expiresIn: expTime.toISOString(),\n            };\n        })\n        .catch(error => {\n            console.log(error)\n        });\n\n\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    author: \"\",\n    text: \"\",\n    isValid: false,\n    authTouched: false,\n    textTouched: false,\n    showComments: false,\n};\n\nconst newQuoteSlice = createSlice({\n    name: \"newQuote\",\n    initialState,\n    reducers: {\n        setAuth(state, action) {\n            state.authTouched = true;\n            state.author = action.payload;\n        },\n        setText(state, action) {\n            state.textTouched = true;\n            state.text = action.payload;\n        },\n        setValid(state, action) {\n            state.isValid = action.payload;\n        },\n        reset(state) {\n            state.author = \"\"\n            state.text = \"\"\n            state.isValid = false\n            state.authTouched = false\n            state.textTouched = false\n        },\n        authBlurHandler(state) {\n            state.authTouched = false;\n        },\n        textBlurHandler(state) {\n            state.textTouched = false;\n        },\n        setCommentsVisibility(state, action) {\n            state.showComments = action.payload;\n        }\n    },\n});\n\nexport const newQuoteReducer = newQuoteSlice.reducer;\nexport const newQuoteAction = newQuoteSlice.actions;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__pcWBd\",\"logo\":\"MainNavigation_logo__3mTft\",\"nav\":\"MainNavigation_nav__2KJfX\",\"active\":\"MainNavigation_active__oN3Ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\",\"cancel\":\"NewCommentForm_cancel__2j2FP\",\"cancel--flat\":\"NewCommentForm_cancel--flat__1Ecta\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    token: localStorage.getItem(\"token\"),\n    isLoggedIn: !!localStorage.getItem(\"token\"),\n    error: null,\n    expirationTime: localStorage.getItem(\"expirationTime\"),\n}\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        logIn(state, action) {\n            state.token = action.payload;\n            state.isLoggedIn = !!action.payload;\n            state.error = null\n            localStorage.setItem(\"token\", action.payload.token);\n        },\n        logOut(state) {\n            state.token = null;\n            state.isLoggedIn = false;\n            state.error = null;\n            state.expirationTime = null;\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"expirationTime\")\n        },\n        setErrorMessege(state, action) {\n            state.error = action.payload;\n        },\n        calculateLogOutTime(state, action) {\n            const currentTime = new Date().getTime();\n            const adjExpirationTime = new Date(action.payload).getTime();\n\n            const remeinigTime = adjExpirationTime - currentTime;\n            console.log(remeinigTime);\n\n            localStorage.setItem(\"expirationTime\", remeinigTime);\n            state.expirationTime = remeinigTime;\n\n        },\n    }\n});\n\nexport const authReducer = authSlice.reducer;\nexport const authAction = authSlice.actions;","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default React.memo(HighlightedQuote);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__auk_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__2Kyqv\"};","import { Fragment, useState } from \"react\";\nimport { Link, Navigate, Outlet } from \"react-router-dom\"\nimport { useLoaderData } from \"react-router-dom\";\nimport { fetchSingleQuote } from \"../hooks/use-http\";\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\n\nexport default function QuoteDetail() {\n\n    const [showComment, setShowComments] = useState(false);\n\n    const getLoader = useLoaderData();\n\n    const clickHandler = () => setShowComments(true);\n\n    return (\n        <Fragment>\n            <h1 className=\"centered\">QuoteDetail</h1>\n            {getLoader ? <HighlightedQuote text={getLoader.text} author={getLoader.author} /> : <Navigate to=\"/no-quote-existed\" replace={true} />}\n            {!showComment\n                ? <Link onClick={clickHandler} className=\"btn--flat centered\" to=\"comments\"> Render comments </Link>\n                : <Outlet />}\n\n        </Fragment>\n\n    )\n};\n\nexport function loader(obj) {\n    return fetchSingleQuote(obj.params.quoteID);\n};\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","import React from 'react';\nimport classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default React.memo(Card);\n","import React from \"react\";\nimport useValidator from \"../hooks/useValidator\";\nimport { useSelector } from \"react-redux\";\nimport { Form } from \"react-router-dom\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\"\nimport Card from '../UI/Card';\nimport classes from './QuoteForm.module.css';\n\nlet init = true;\n\nconst QuoteForm = (props) => {\n  const { authChangeHandler, textChangeHandler, authorBlur, textBlur, authValid, textValid, } = useValidator();\n\n  init = false;\n\n  const newEntry = useSelector(state => state.newQuoteReducer);\n\n  return (\n    <Card>\n      <Form className={classes.form} method=\"post\" action=\"/new-quote\">\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author { }</label>\n          <input\n            style={{ backgroundColor: authValid && !init ? \"pink\" : \"white\" }}\n            onBlur={authorBlur}\n            onChange={authChangeHandler}\n            type='text'\n            name=\"author\"\n            id='author' />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea\n            style={{ backgroundColor: textValid && !init ? \"pink\" : \"white\" }}\n            onBlur={textBlur}\n            onChange={textChangeHandler}\n            name=\"text\"\n            id='text'\n            rows='5' ></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button\n            type='submit'\n            className='btn'\n            disabled={!newEntry.isValid}>Add Quote</button>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n\nexport default React.memo(QuoteForm);\n\n\n\n","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { newQuoteAction } from \"../store/newQuoteSlice\";\n\nexport default function useValidator() {\n\n    const dispatchFN = useDispatch();\n    const { author, text, isValid, authTouched, textTouched } = useSelector(state => state.newQuoteReducer);\n\n    useEffect(() => {\n        if (author.trim() !== \"\" && text.trim() !== \"\") {\n            dispatchFN(newQuoteAction.setValid(true))\n        } else {\n            dispatchFN(newQuoteAction.setValid(false))\n        }\n    }, [dispatchFN, author, text]);\n\n    const authChangeHandler = (element) => {\n        dispatchFN(newQuoteAction.setAuth(element.target.value))\n    };\n\n    const textChangeHandler = (element) => {\n        dispatchFN(newQuoteAction.setText(element.target.value))\n    };\n\n    const authorBlur = () => {\n        dispatchFN(newQuoteAction.authBlurHandler())\n    };\n\n    const textBlur = () => {\n        dispatchFN(newQuoteAction.textBlurHandler())\n    };\n\n    const authValid = authTouched && author.trim() === \"\" && !isValid;\n    const textValid = textTouched && text.trim() === \"\" && !isValid;\n\n    return {\n        authChangeHandler,\n        textChangeHandler,\n        authorBlur,\n        textBlur,\n        authValid,\n        textValid,\n    }\n};\n","import { redirect } from \"react-router-dom\"\nimport { addQuote } from \"../hooks/use-http\"\nimport QuoteForm from \"../quotes/QuoteForm\"\n\nexport default function NewQuotes() {\n\n    return (\n        <QuoteForm />\n    )\n}\n\nexport async function action(obj) {\n\n    const formData = await obj.request.formData();\n    const newPost = {\n        author: formData.get(\"author\"),\n        text: formData.get(\"text\"),\n    };\n    try {\n        await addQuote(newPost)\n    } catch (error) {\n        console.log(error);\n        throw error\n\n    };\n\n    return redirect(\"/quotes\");\n\n}","import { configureStore } from \"@reduxjs/toolkit\";\nimport { newQuoteReducer } from \"./newQuoteSlice\";\nimport { authReducer } from \"./authSlice\"\n\n\nconst store = configureStore({\n    reducer: {\n        newQuoteReducer,\n        authReducer,\n    }\n})\n\nexport default store","import { useSelector } from \"react-redux\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { authAction } from \"../store/authSlice\";\nimport { useDispatch } from \"react-redux\";\nimport classes from \"./MainNavigation.module.css\"\n\nexport default function MainNavigation() {\n    const navigate = useNavigate()\n    const dispatchFN = useDispatch();\n\n    const authCTX = useSelector(state => state.authReducer);\n\n    const logoutHandler = () => {\n        dispatchFN(authAction.logOut());\n        navigate(\"/quotes\");\n    };\n\n    return <header className={classes.header}>\n        <div className={classes.logo}>\n            Danylos Quotes\n        </div>\n\n        <nav className={classes.nav}>\n            <ul>\n                <li> <NavLink className={item => item.isActive ? classes.active : \"\"} to=\"/quotes\"> Quotes </NavLink> </li>\n                {authCTX.isLoggedIn && <li> <NavLink className={item => item.isActive ? classes.active : \"\"} to=\"/new-quote\"> New Quotes </NavLink> </li>}\n                {!authCTX.isLoggedIn\n                    ? <li> <NavLink className={item => item.isActive ? classes.active : \"\"} to=\"/auth_form\"> Log In </NavLink> </li>\n                    : <li>\n                        <button onClick={logoutHandler} className={classes.logOut}>\n                            Log Out\n                        </button>\n                    </li>}\n            </ul>\n        </nav>\n    </header>\n};\n\n","import { Fragment } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport classes from \"./Layout.module.css\";\nimport MainNavigation from \"./MainNavigation\";\n\nexport default function Layout() {\n\n    return <Fragment>\n        <MainNavigation />\n        <main className={classes.main}>\n            <Outlet />\n        </main>\n    </Fragment>\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default React.memo(QuoteItem);\n","import React from 'react';\nimport { Fragment } from 'react';\nimport { FetchQuotes } from '../hooks/use-http';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sorteQuotes = (prevQuotes, ascChecker) => [...prevQuotes].sort((a, b) => {\n  if (ascChecker) {\n    return a.id > b.id ? 1 : -1\n  } else {\n    return a.id < b.id ? 1 : -1\n  }\n});\n\nconst QuoteList = (props) => {\n\n  const navigate = useNavigate();\n  const searchParams = useLocation();\n  const searched = new URLSearchParams(searchParams.search);\n  const isAscending = searched.get(\"sort\") === \"asc\";\n  const sorted = sorteQuotes(props.quotes, isAscending);\n\n\n\n  const navigateHandler = () => {\n    navigate(`/quotes?sort=${isAscending ? \"des\" : \"asc\"}`);\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={navigateHandler}>Sorted {isAscending ? \"Ascending\" : \"Decending\"}</button>\n      </div>\n      <ul className={classes.list}>\n        {sorted.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default React.memo(QuoteList);\n\nexport function loader() {\n  return FetchQuotes()\n}\n","import { useLoaderData } from \"react-router-dom\"\nimport QuoteList from \"../quotes/QuoteList\"\n\n\nexport default function AllQuotes() {\n\n    const quotesLoader = useLoaderData();\n\n    return <QuoteList quotes={quotesLoader} />\n}","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport { addComment } from '../hooks/use-http';\nimport { Form, redirect } from 'react-router-dom';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n\n  return (\n    <Form className={classes.form} method=\"post\" action={`/quotes/${props.id}/comments`}>\n      <div className={classes.control}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea minLength=\"6\" required id='comment' rows='5' name=\"comment\"></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button onClick={props.cancelHandler} className={`${classes.cancel} + btn`}>Cancel</button>\n        <button className='btn'>Add Comment </button>\n      </div>\n\n    </Form>\n  );\n};\n\nexport default React.memo(NewCommentForm);\n\n\nexport async function action(obj) {\n  const formData = await obj.request.formData();\n  const newComment = {\n    id: obj.params.quoteID,\n    value: formData.get(\"comment\")\n  };\n  // window.location.reload(false)\n\n  try {\n    await addComment(newComment);\n  } catch (error) {\n    console.log(error);\n  };\n\n  return redirect(`/quotes/${obj.params.quoteID}/comments`)\n\n}\n\n","import { useState } from 'react';\nimport { useLoaderData, useParams } from 'react-router-dom';\nimport { getAllComments } from \"../hooks/use-http\"\nimport CommentItem from \"./CommentItem\"\nimport NewCommentForm from './NewCommentForm';\nimport classes from './Comments.module.css';\n\nconst Comments = () => {\n  const commentsLoaderData = useLoaderData();\n\n  const [isAddingComment, setIsAddingComment] = useState();\n  const inParams = useParams();\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  return (\n    <section className={classes.comments}>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm id={inParams.quoteID} cancelHandler={() => setIsAddingComment(false)} />}\n      <ul>\n        {commentsLoaderData.map(el => <CommentItem key={el.id} text={el.value} />)}\n      </ul>\n    </section>\n  );\n};\n\nexport default Comments;\n\nexport function loader(obj) {\n  return getAllComments(obj.params.quoteID)\n}\n","import React, { Suspense } from \"react\";\nimport { Route, Navigate, createBrowserRouter, createRoutesFromElements, RouterProvider } from \"react-router-dom\"\nimport Layout from \"./components/layout/Layout\";\nimport AllQuotes from \"./components/pages/AllQuotes\"\nimport HighlightedQuote from \"./components/quotes/HighlightedQuote\"\nimport Comments from \"./components/comments/Comments\";\nimport LoadingSpinner from \"./components/UI/LoadingSpinner\";\nimport { loader as quotesLoader } from \"./components/quotes/QuoteList\"\nimport { loader as singleQuoteLoader } from \"./components/pages/QuoteDetail\"\nimport { loader as commentsLoader } from \"./components/comments/Comments\";\nimport { action as quoteAction } from \"./components/pages/NewQuotes\"\nimport { action as commentAction } from \"./components/comments/NewCommentForm\";\nimport { useSelector } from \"react-redux\";\n\nfunction App() {\n  const authStatus = useSelector(state => state.authReducer);\n  console.log(authStatus);\n  const NewQuotes = React.lazy(() => import(\"./components/pages/NewQuotes\"));\n  const QuoteDetail = React.lazy(() => import(\"./components/pages/QuoteDetail\"));\n  const AuthForm = React.lazy(() => import(\"./authentication/AuthForm\"));\n  const NotFound = React.lazy(() => import(\"./components/quotes/NoQuotesFound\"));\n\n  const roures = createBrowserRouter(createRoutesFromElements(\n    <Route path=\"/\" element={<Layout />} errorElement={<NotFound />}>\n      <Route index element={<Navigate to=\"/quotes\" />} />\n      <Route path=\"/quotes/*\" element={<AllQuotes />} loader={quotesLoader} />\n      {authStatus.isLoggedIn && <Route path=\"/new-quote\" element={<NewQuotes />} action={quoteAction} />}\n      <Route path=\"/quotes/:quoteID/*\" element={<QuoteDetail />} loader={singleQuoteLoader}>\n        <Route path=\"comments\" element={<Comments />} loader={commentsLoader} action={commentAction} />\n      </Route>\n      <Route path=\"/highlighted\" element={<HighlightedQuote />} />\n      <Route path=\"/auth_form/*\" element={<AuthForm />} />\n      <Route path=\"*\" element={<Navigate to=\"/quotes\" />} />\n    </Route>\n  ));\n\n  return <Suspense fallback={<div className=\"centered\"> <LoadingSpinner /> </div>}>\n    <RouterProvider router={roures} />\n  </Suspense>\n\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport store from './components/store/store';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n"],"sourceRoot":""}